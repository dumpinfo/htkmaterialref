        HTK识别器的建立和使用--第三步：创建状态约束的三音子HMM模型
        
  模型构建的最终阶段是创建上下文相关的三音子HMM。首先，将单音子转换成三音
子，重估以后建立三音子的HMM。其次，这些模型中声学特征相似的状态要约束在一
起以确保可以在鲁棒性很强的情况下估计整个的状态分布。

Step 9. 由单音子到三音子
  拷贝已有的单音子模型，再用三音子的转换文件重估即可创建三音子模型了。
  首先创建转换文件，还是利用HLED来创建：
  HLEd -n triphones1 -l '*' -i wintri.mlf mktri.led aligned.mlf
triphones1用来存放所用到的音子列表，单音子文件aligned.mlf被转换成三音子文
件wintri.mlf，命令脚本mktri.led包含命令为：
  WB sp
  WB sil
  TC
WB命令把sp和sil定义为单词分界符，单词分界符不会有从单音子到三音子的转换，
另外注意在转换过程中，也会产生双音子。
  接下来就是要拷贝单音子模型。利用HHED可以完成：
  HHEd -B -H hmm9/macros -H hmm9/hmmdefs -M hmm10 
         mktri.hed monophones1
命令脚本mktri.hed可以用HTK提供的Perl脚本maketrihed来产生：
    CL triphones1
    TI T_ah {(*-ah+*,ah+*,*-ah).transP}
    TI T_ax {(*-ax+*,ax+*,*-ax).transP}
    TI T_ey {(*-ey+*,ey+*,*-ey).transP}
    ...
拷贝命令CL的参数是有三音子（或者双音子）列表的文件，对其中形式如a-b+c的模
型，它找出单音子b，并做个拷贝。TI命令则为和它所列模式相匹配的音子的HMM模
型的转换矩阵（transP）设定约束关系，使得设置后的转换矩阵都指向一个宏（TI
命令的第一个参数），这个宏会提供一个矩阵与这些模型共享。这样，在对约束后
的参数进行重估时就能够集中进行，获得的数据比原先分散开来的重估要更加可靠。
  当然，无差别地进行约束会影响识别的性能。所以，重要的是只约束那些对识别
影响很小的参数，就象在这个例子里，转换矩阵的参数并不会随着声学环境的改变
而显著变化。另外就是某些音子仅仅出现过一两次，这种数据不足也会影响结果，
下一步中会提出解决这个问题的办法。
  迄今为止，所有的HMM模型都是以文本形式储存，而当模型文件越来越大时，空间
和读取时间就成了一个大问题。为了增加效率，HTK允许以二进制的形式存和读MMF
，在HHED命令中的选项-B就实现了这个功能。接下来就是又要利用HEREST来反复重
估模型，只是列表文件和转换文件都要用三音子的。在最后一次重估时，要加入选
项-s，以产生一个名为stats的状态占用统计文件。再结合均值和方差，就可以计算
状态聚类的似然比，所有这些在接下来的状态聚类过程中都将需要。现在，存放模
型文件的目录已经到了hmm12了。
   HERest -C config -I wintri.mlf -t 250.0 150.0 1000.0 -s stats \
    -S train.scp -H hmm10/macros -H hmm10/hmmdefs -M hmm11 triphones1

Step 10. 制造状态约束的三音子模型
  我们现在已经有了一系列共享转换矩阵的三音子模型。当重估这些模型的时候，
由于和许多状态相关联的数据不足，输出分布的许多方差无法给出，所以，模型建
立的最后一步就是约束状态以共享数据，就可以估计出鲁棒性的参数。然而，选择
约束的状态势必要更加准确，因为识别器表现的关键依赖于状态输出分布能够在多
大程度上准确地反映出语音数据的统计信息。
  HHED提供两个机制进行状态聚集并约束每一个聚类。第一步是数据驱动，测量状
态间的相似度。第二步利用决策树，是基于询问每一个三音子左边和右边的上下文
的基础上的。决策树尝试着找出在声学环境上能够产生最大不同的上下文，以此来
区分聚类。